{"version":3,"sources":["../../app/middleware/authenticate.js"],"names":["authenticate","sessionSecret","security","req","res","next","authorization","headers","verify","err","decoded","sendStatus","User","findById","_id","user","currentUser"],"mappings":";;;;;;;;;;;;;;kBAUwBA,Y;;AARxB;;;;AACA;;;;;;IAEQC,a,GAAkB,oBAAUC,Q,CAA5BD,a;;AAER;AACA;;AAEe,SAASD,YAAT,CAAsBG,GAAtB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsC;AAAA;;AAAA,MAC3CC,aAD2C,GACzBH,IAAII,OADqB,CAC3CD,aAD2C;;AAEnD,yBAAIE,MAAJ,CAAWF,aAAX,EAA0BL,aAA1B;AAAA,0EAAyC,iBAAOQ,GAAP,EAAYC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACnCD,GADmC;AAAA;AAAA;AAAA;;AAAA,+CAE9BL,IAAIO,UAAJ,CAAe,GAAf,CAF8B;;AAAA;AAAA;AAAA;AAAA,qBAQlBC,KAAKC,QAAL,CAAcH,QAAQI,GAAtB,CARkB;;AAAA;AAQ/BC,kBAR+B;;AAAA,kBAShCA,IATgC;AAAA;AAAA;AAAA;;AAAA,+CAU5BX,IAAIO,UAAJ,CAAe,GAAf,CAV4B;;AAAA;AAYrCR,kBAAIa,WAAJ,GAAkBD,IAAlB;AACAV;AAbqC;AAAA;;AAAA;AAAA;AAAA;;AAerCA;;AAfqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzC;;AAAA;AAAA;AAAA;AAAA;AAkBD","file":"authenticate.js","sourcesContent":["/* @flow */\n\nimport jwt from 'jsonwebtoken'\nimport Constants from '../config/constants'\n\nconst { sessionSecret } = Constants.security\n\n//TODO: Authenticate access to all posts with this user's ID, but we don't\n//      Need the actual user to search for it here.\n\nexport default function authenticate(req, res, next) {\n  const { authorization } = req.headers\n  jwt.verify(authorization, sessionSecret, async (err, decoded) => {\n    if (err) {\n      return res.sendStatus(401)\n    }\n\n    // If token is decoded successfully, find user and attach to our request\n    // for use in our route or other middleware\n    try {\n      const user = await User.findById(decoded._id)\n      if (!user) {\n        return res.sendStatus(401)\n      }\n      req.currentUser = user\n      next()\n    } catch(err) {\n      next(err)\n    }\n  })\n}\n"]}